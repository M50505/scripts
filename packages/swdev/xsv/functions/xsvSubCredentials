#!/usr/bin/env bash
# vim:tabstop=2:shiftwidth=2:nu:filetype=sh
xsvSubCredentials ()
{
	_doc $1 20140617163044 "pulls a prompted-for CSV file into RAM, and then substitutes the fields from that CSV file for those matching fields in the master GenRsp CSV matrix whose values are PROMPT." && return 0

	#	These variables have been setup by the
	#	xsvGenRsp script and are available to
	#	this function:
	#
	#	Indices into the comma-separated fields 
	#
	#	ATTRIBUTE_INDEX						- the attribute name.
	#	CONFIG_FILE_INDEX					- the configuration file name.
	#	CONFIG_SECTION_INDEX			- the name of the section within the configuration file.
	#	BEGIN_HOSTS_INDEX					- the first host column.
	#
	#	records										- the array of lines/records, one for each attribute.
	#	hosts											-	the array of host names.
	#	envs											-	the array of environment names - the indices of this array match the indices of the hosts array.
	#	hostCount									-	convenience/performance variable that holds the number of hosts.
	#	responseFileDirectory			- the directory where the response file(s) will be created.
	#	delimiter									- the field delimiter character.
	#

	local extensions=(rcu rsp ports)	# The file extensions/type that this function generates.
	local targetExtension				# Hoding variable while cycling through extensions.
	local isExtensionMatched		#	For testing on each cycle if an extension/type is matched.

	local sections=(HEADER WEBLOGIC BIFOUNDATION OPMN ENGINE GENERIC SYSTEM APPLICATIONS RELATIONSHIPS NONE)	# The sections that this function handles.
	local previousSection section	#	Holds the previous and current config file section name on the current cycle.

	local host env i j					# holding and iteration variables.

	local attribute							#	Holds the attribute name on the current cycle.
	local ext										#	holds thew config file extension o nthe current cycle.
	local file									#	The derived path of the config file using host, env, ext, and responseFileDirectory.
	local	value									#	Holds the value for each attribute.
	local update								#	Indicates whether or not the current records must be updated.
	local prompt								#	Holds the current prompt.
	local promptFile						#	If specified as the first argument to this function, then this variable capture the name of the prompt file to generate.

	if [[ $# -gt 0 ]]
	then
		promptFile="${1}"
		> ${promptFile}
	fi

	IFS="${delimiter}"

	for((i=0;i<${#records[@]};i++))
	do
		update=false

		fields=(${records[${i}]})

		[[ ${#fields[@]} -lt 1 ]] && continue

		attribute=${fields[ATTRIBUTE_INDEX]}

		[[ "${attribute}" = "ENVIRONMENT" ]] && continue
		[[ "${attribute}" = "HOST" ]] && continue

		section=$(toUpper ${fields[CONFIG_SECTION_INDEX]})

		ext=$(toLower ${fields[CONFIG_FILE_INDEX]})

		for((j=0;j<hostCount;j++))
		do
			file="${responseFileDirectory}/$(toUpper ${hosts[${j}]})_$(toUpper ${envs[${j}]}).${ext}"
			value="${fields[BEGIN_HOSTS_INDEX+j]}"

			if [[ "${value}" = "PROMPT" ]]
			then
				prompt="${envs[j]},${hosts[j]} ${attribute}"

				read -s -p "${prompt}: " value
				echo ""

				[[ -n ${promptFile} ]] && echo "${prompt}=" >> ${promptFile}

				fields[BEGIN_HOSTS_INDEX+j]="${value}"
				update=true
			fi
		done

		[[ ${update} ]] && records[i]="${fields[*]}"
	done

	unset IFS
}

